generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model sop {
  id           String      @id
  title        String      @db.VarChar(255)
  description  String      @db.Text
  instructions String      @db.LongText
  category     String      @db.VarChar(100)
  priority     String      @db.VarChar(50)
  tags         Json
  steps        Json
  authorId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  user         user        @relation("SopAuthor", fields: [authorId], references: [id], map: "SOP_authorId_fkey")
  accessGroups SopAccessGroup[] @relation("SopAccessGroups")

  @@index([authorId], map: "SOP_authorId_fkey")
}

model user {
  id            String             @id
  email         String             @unique(map: "User_email_key")
  name          String?
  role          user_role          @default(USER)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
  authoredSops  sop[]              @relation("SopAuthor")
  accessGroups  UserAccessGroup[]  @relation("UserAccessGroups")
}

model AccessGroup {
  id          String             @id @default(cuid())
  name        String             @unique @db.VarChar(100)
  description String?            @db.Text
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  sops        SopAccessGroup[]   @relation("AccessGroupSops")
  users       UserAccessGroup[]  @relation("AccessGroupUsers")
}

model UserAccessGroup {
  id            String      @id @default(cuid())
  userId        String
  accessGroupId String
  assignedAt    DateTime    @default(now())
  assignedBy    String?     // ID de l'admin qui a fait l'assignation
  user          user        @relation("UserAccessGroups", fields: [userId], references: [id], onDelete: Cascade)
  accessGroup   AccessGroup @relation("AccessGroupUsers", fields: [accessGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, accessGroupId])
  @@index([userId])
  @@index([accessGroupId])
}

model SopAccessGroup {
  id            String      @id @default(cuid())
  sopId         String
  accessGroupId String
  assignedAt    DateTime    @default(now())
  sop           sop         @relation("SopAccessGroups", fields: [sopId], references: [id], onDelete: Cascade)
  accessGroup   AccessGroup @relation("AccessGroupSops", fields: [accessGroupId], references: [id], onDelete: Cascade)

  @@unique([sopId, accessGroupId])
  @@index([sopId])
  @@index([accessGroupId])
}

enum user_role {
  ADMIN
  AUTHOR
  USER
}
